package team.bjtuss.bjtuselfservice.screen

import android.content.ComponentName
import android.content.Context
import android.content.Intent
import android.widget.Toast
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.KeyboardArrowRight
import androidx.compose.material.icons.filled.AccountBalanceWallet
import androidx.compose.material.icons.filled.Add
import androidx.compose.material.icons.filled.ArrowForward
import androidx.compose.material.icons.filled.Delete
import androidx.compose.material.icons.filled.Edit
import androidx.compose.material.icons.filled.Email
import androidx.compose.material.icons.filled.Refresh
import androidx.compose.material.icons.filled.Wifi
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.Button
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.HorizontalDivider
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.window.Dialog
import androidx.navigation.NavController
import team.bjtuss.bjtuselfservice.R
import team.bjtuss.bjtuselfservice.RouteManager
import team.bjtuss.bjtuselfservice.StudentAccountManager
import team.bjtuss.bjtuselfservice.entity.CourseEntity
import team.bjtuss.bjtuselfservice.entity.ExamScheduleEntity
import team.bjtuss.bjtuselfservice.entity.GradeEntity
import team.bjtuss.bjtuselfservice.entity.HomeworkEntity
import team.bjtuss.bjtuselfservice.repository.NetworkRepository
import team.bjtuss.bjtuselfservice.utils.KotlinUtils
import team.bjtuss.bjtuselfservice.viewmodel.DataChange
import team.bjtuss.bjtuselfservice.viewmodel.MainViewModel
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.time.temporal.ChronoUnit
import kotlin.collections.component1
import kotlin.collections.component2

@Composable
fun HomeScreen(navController: NavController, mainViewModel: MainViewModel) {
    val studentAccountManager = StudentAccountManager.getInstance()

    val gradeChangeList: List<DataChange<GradeEntity>> by mainViewModel.gradeViewModel.changeList.collectAsState()
    val courseChangeList: List<DataChange<CourseEntity>> by mainViewModel.courseScheduleViewModel.changeList.collectAsState()
    val examScheduleChangeList: List<DataChange<ExamScheduleEntity>> by mainViewModel.examScheduleViewModel.changeList.collectAsState()
    val homeworkChangeList: List<DataChange<HomeworkEntity>> by mainViewModel.homeworkViewModel.changeList.collectAsState()

    val homeworkList: List<HomeworkEntity> by mainViewModel.homeworkViewModel.homeworkList.collectAsState()

    var status by remember { mutableStateOf<StudentAccountManager.Status?>(null) }
    var selectedGradeChange by remember { mutableStateOf<DataChange<GradeEntity>?>(null) }
    var selectedHomeworkChange by remember { mutableStateOf<DataChange<HomeworkEntity>?>(null) }
    var selectedExamChange by remember { mutableStateOf<DataChange<ExamScheduleEntity>?>(null) }
    var showGradeDialog by remember { mutableStateOf(false) }
    var showHomeworkDialog by remember { mutableStateOf(false) }
    var showExamDialog by remember { mutableStateOf(false) }
    var isRefreshing by remember { mutableStateOf(false) }

    studentAccountManager.status.thenAccept {
        status = it
    }

    NetworkRepository.getQueueStatus().observeForever {
        isRefreshing = it
    }

    // Status info formatting functions
    val ecardBalance = "Ê†°Âõ≠Âç°‰ΩôÈ¢ùÔºö${status?.EcardBalance}".let {
        if (status?.EcardBalance?.toDoubleOrNull() ?: 0.0 < 20) {
            "$itÔºåËØ•ÂÖÖ‰∫Ü"
        } else {
            it
        }
    }

    val netBalance = "Ê†°Âõ≠ÁΩë‰ΩôÈ¢ùÔºö${status?.NetBalance}".let {
        if (status?.NetBalance == "0") {
            "$itÔºåüò±Ê≤°ÁΩë‰∫Ü"
        } else {
            it
        }
    }

    val newMailCount = "Êñ∞ÈÇÆ‰ª∂Ôºö${status?.NewMailCount}".let {
        if (status?.NewMailCount != "0") {
            "$itÔºåËÆ∞ÂæóÂéªÁúãÂì¶"
        } else {
            it
        }
    }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(MaterialTheme.colorScheme.background)
            .padding(8.dp),
        verticalArrangement = Arrangement.spacedBy(8.dp)
    ) {


        StatusInfo(ecardBalance, netBalance, newMailCount, navController)

        // Grade Changes Section
        Card(
            modifier = Modifier
                .weight(1f)
                .fillMaxWidth(),
            shape = RoundedCornerShape(16.dp),
//            colors = CardDefaults.cardColors(
//                containerColor = MaterialTheme.colorScheme.surface,
//            )
        ) {
            Text(
                text = "ATTENTION!!!",
                style = MaterialTheme.typography.headlineMedium.copy(
                    color = MaterialTheme.colorScheme.primary,
                    fontWeight = FontWeight.Bold,
                ),
                modifier = Modifier.padding(start = 16.dp)
            )
            LazyColumn(
                modifier = Modifier.padding(8.dp),
                verticalArrangement = Arrangement.spacedBy(4.dp)
            ) {
                item {
                    HomeworkNoticeCard(homeworkList, navController)
                }
                if (gradeChangeList.isNotEmpty()) {
                    item {
                        Text(
                            text = "ÊàêÁª©ÂçïÂèòÂä®",
                            style = MaterialTheme.typography.headlineSmall,
                            color = MaterialTheme.colorScheme.onSurface,
                            fontWeight = FontWeight.Bold,
                            modifier = Modifier.padding(start = 16.dp)
                        )


                        Column(
                            modifier = Modifier,
                            verticalArrangement = Arrangement.spacedBy(6.dp)
                        ) {
                            gradeChangeList.forEach { gradeChange ->
                                ChangeCard(
                                    dataChange = gradeChange,
                                    onClick = {
                                        selectedGradeChange = gradeChange
                                        showGradeDialog = true
                                    }
                                )
                            }
                        }
                    }
                }

                if (courseChangeList.isNotEmpty()) {
                    item {
                        Text(
                            text = "ËØæÁ®ãË°®ÂèòÂä®",
                            style = MaterialTheme.typography.headlineSmall,
                            color = MaterialTheme.colorScheme.onSurface,
                            fontWeight = FontWeight.Bold,
                            modifier = Modifier.padding(start = 16.dp)
                        )

                        Column {
                            courseChangeList.forEach { courseChange ->
                                ChangeCard(
                                    dataChange = courseChange,
                                    onClick = {
                                        navController.navigate(RouteManager.CourseSchedule)
                                    }
                                )
                            }
                        }
                    }
                }

                if (examScheduleChangeList.isNotEmpty()) {
                    item {
                        Text(
                            text = "ËÄÉËØïÂÆâÊéíÂèòÂä®",
                            style = MaterialTheme.typography.headlineSmall,
                            color = MaterialTheme.colorScheme.onSurface,
                            fontWeight = FontWeight.Bold,
                            modifier = Modifier.padding(start = 16.dp)
                        )

                        Column {
                            examScheduleChangeList.forEach { examChange ->
                                ChangeCard(
                                    dataChange = examChange,
                                    onClick = {
                                        selectedExamChange = examChange
                                        showExamDialog = true
                                    }
                                )
                            }
                        }
                    }
                }

                if (homeworkChangeList.isNotEmpty()) {
                    item {
                        Text(
                            text = "‰Ωú‰∏öÂèòÂä®",
                            style = MaterialTheme.typography.headlineSmall,
                            color = MaterialTheme.colorScheme.onSurface,
                            fontWeight = FontWeight.Bold,
                            modifier = Modifier.padding(start = 16.dp)
                        )

                        Column {
                            homeworkChangeList.forEach { homeworkChange ->
                                ChangeCard(
                                    dataChange = homeworkChange,
                                    onClick = {
                                        selectedHomeworkChange = homeworkChange
                                        showHomeworkDialog = true
                                    }
                                )
                            }
                        }
                    }
                }
            }
            if (isRefreshing) {
                Box(
                    modifier = Modifier
                        .fillMaxSize()
                        .padding(top = 32.dp)
                ) {
                    RotatingImageLoader(
                        image = painterResource(id = R.drawable.loading_icon),
                        rotationDuration = 1000,
                        modifier = Modifier.align(Alignment.Center)
                    )
                }
            }
        }

        Button(
            onClick = {
                mainViewModel.loadDataAndDetectChanges()
            },
            modifier = Modifier
                .align(Alignment.CenterHorizontally),
            enabled = !isRefreshing
        ) {
            Icon(
                imageVector = Icons.Default.Refresh,
                contentDescription = "Âà∑Êñ∞",
                modifier = Modifier.size(18.dp)
            )
            Text("Âà∑Êñ∞",
                fontSize = 18.sp
            )
        }
    }

    if (showGradeDialog && selectedGradeChange != null) {
        DetailedChangeDialog(
            change = selectedGradeChange!!,
            onDismiss = { showGradeDialog = false },
            cardItem = { GradeItemCard(it) },
            onClick = { navController.navigate(RouteManager.Grade) }
        )
    }
    if (showHomeworkDialog && selectedHomeworkChange != null) {
        DetailedChangeDialog(
            change = selectedHomeworkChange!!,
            onDismiss = { showHomeworkDialog = false },
            cardItem = { HomeworkItemCard(it) },
            onClick = { navController.navigate(RouteManager.HomeWork) }
        )
    }
    if (showExamDialog && selectedExamChange != null) {
        DetailedChangeDialog(
            change = selectedExamChange!!,
            onDismiss = { showExamDialog = false },
            cardItem = { ExamItemCard(it) },
            onClick = { navController.navigate(RouteManager.ExamSchedule) }
        )
    }
}

@Composable
fun StatusInfo(
    ecardBalance: String,
    netBalance: String,
    newMailCount: String,
    navController: NavController
) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        shape = RoundedCornerShape(16.dp),
    ) {
        Column(
            modifier = Modifier.padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(8.dp)
        ) {
            Row(verticalAlignment = Alignment.CenterVertically) {
                MailButton({
                    Text(newMailCount, fontSize = 18.sp)
                           }, navController)
            }
            Row(verticalAlignment = Alignment.CenterVertically) {
                EcardButton({ Text(ecardBalance, fontSize = 18.sp) })
            }
            Row(verticalAlignment = Alignment.CenterVertically) {
                NetButton({ Text(netBalance, fontSize = 18.sp) })
            }
        }
    }
}

@Composable
fun MailButton(content: @Composable () -> Unit, navController: NavController) {
    Button(
        onClick = {
            navController.navigate(RouteManager.Email)
        },
        modifier = Modifier.fillMaxWidth()
    ) {
        Icon(
            imageVector = Icons.Default.Email,
            contentDescription = "New Mail",
            tint = Color.Blue
        )
        Spacer(modifier = Modifier.width(8.dp))
        content()
    }
}

@Composable
fun EcardButton(content: @Composable () -> Unit) {
    val context = LocalContext.current
    var showDialog by remember { mutableStateOf(false) }

    Button(
        onClick = {
            showDialog = true
        },
        modifier = Modifier.fillMaxWidth()
    ) {
        Icon(
            imageVector = Icons.Default.AccountBalanceWallet,
            contentDescription = "Ecard Balance",
            tint = Color.Green
        )
        Spacer(modifier = Modifier.width(8.dp))
        content()
    }

    // ÊòæÁ§∫ÂØπËØùÊ°Ü
    if (showDialog) {
        AlertDialog(
            onDismissRequest = { showDialog = false },
            title = { Text("Ê†°Âõ≠Âç°ÂÖÖÂÄº") },
            text = {
                Text("ËØ∑Ê≥®ÊÑèÔºåÊé•‰∏ãÊù•Âç≥Â∞ÜËΩ¨Ë∑≥‚ÄúÂÆåÁæéÊ†°Âõ≠‚Äùapp\nÁ°Æ‰øùËá™Â∑±Â∑≤ÂÆâË£ÖÂì¶‚ò∫Ô∏è")
            },
            confirmButton = {
                Button(onClick = {
                    launchWanMeiCampusApp(context)
                    showDialog = false
                }) {
                    Text("ÊâìÂºÄÂ∫îÁî®")
                }
            },
            dismissButton = {
                TextButton(onClick = { showDialog = false }) {
                    Text("ÂèñÊ∂à")
                }
            }
        )
    }
}

fun shareToWeChat(context: Context) {
    val shareIntent = Intent(Intent.ACTION_SEND).apply {
        type = "text/plain"
        putExtra(Intent.EXTRA_TEXT, "https://weixin.bjtu.edu.cn/pay/wap/network/recharge.html")
    }
    val chooser = Intent.createChooser(shareIntent, "ËØ∑ÈÄâÊã©Ôºö‚ÄúÂæÆ‰ø°ÔºöÂèëÈÄÅÁªôÊúãÂèã‚Äù")

    try {
        context.startActivity(chooser)
    } catch (e: Exception) {
        Toast.makeText(context, "Êú™ÊâæÂà∞‚ÄúÂæÆ‰ø°‚ÄùappÔºüÔºüÔºüÔºü", Toast.LENGTH_LONG).show()
    }
}

@Composable
fun NetButton(content: @Composable () -> Unit) {
    val context = LocalContext.current
    var showDialog by remember { mutableStateOf(false) }

    Button(
        onClick = {
            showDialog = true
        },
        modifier = Modifier.fillMaxWidth()
    ) {
        Icon(
            imageVector = Icons.Default.Wifi,
            contentDescription = "Net Balance",
            tint = Color.Red
        )
        Spacer(modifier = Modifier.width(8.dp))
        content()
    }

    // ÊòæÁ§∫ÂÖÖÂÄºÊèêÈÜíÂØπËØùÊ°Ü
    if (showDialog) {
        AlertDialog(
            onDismissRequest = { showDialog = false },
            title = { Text("Ê†°Âõ≠ÁΩëÁª≠Ë¥π") },
            text = {
                Text("‰∏çÂ•ΩÊÑèÊÄùÁõ¥Êé•ËΩ¨Ë∑≥ÂæÆ‰ø°ÊàêÊú¨ËøòÊòØÂ§™È´òÔºå‰∏çËøá\nÊ≥®ÊÑèÔºö‰ª•‰∏ãÊìç‰ΩúÈúÄÂæÆ‰ø°ÁªëÂÆöÂ≠¶Ê†°‰ºÅ‰∏öÂè∑\nËØ∑ÂàÜ‰∫´Ëá≥ÂæÆ‰ø°ÔºåÂêéÊâìÂºÄÔºàËé´ÂêêÊßΩüôèÔºâÂì¶")
            },
            confirmButton = {
                Button(onClick = {
                    shareToWeChat(context)
                    showDialog = false
                }) {
                    Text("ÂàÜ‰∫´Ëá≥ÂæÆ‰ø°")
                }
            },
            dismissButton = {
                TextButton(onClick = { showDialog = false }) {
                    Text("ÂèñÊ∂à")
                }
            }
        )
    }
}

// Â∞ùËØïÂêØÂä®‚ÄúÂÆåÁæéÊ†°Âõ≠‚ÄùÂ∫îÁî®
fun launchWanMeiCampusApp(context: Context) {
    val intent = Intent().apply {
        component = ComponentName("com.newcapec.mobile.ncp", "com.wanxiao.basebusiness.activity.SplashActivity")
    }

    try {
        context.startActivity(intent)
    } catch (e: Exception) {
        Toast.makeText(context, "Êú™ÊâæÂà∞‚ÄúÂÆåÁæéÊ†°Âõ≠‚Äùapp", Toast.LENGTH_LONG).show()
    }
}

@Composable
private fun HomeworkNoticeCard(
    homeworkList: List<HomeworkEntity>,
    navController: NavController
) {
    val formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm")
    val now = LocalDateTime.now()
    var countForDeadline = 0
    val DDLList = mutableListOf<HomeworkEntity>()
    var showDetail by remember { mutableStateOf(false) }
    homeworkList.forEach {
        try {
            if (ChronoUnit.HOURS.between(now, LocalDateTime.parse(it.endTime, formatter)) in 0..48) {
                if (it.subStatus != "Â∑≤Êèê‰∫§"){
                    countForDeadline++
                    DDLList.add(it)
                }
            }
        } catch (_: Exception) {}
    }

    if (countForDeadline > 0) {
        Card(
            modifier = Modifier
                .fillMaxWidth(),
            shape = RoundedCornerShape(12.dp),
            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),
            onClick = {
                showDetail = true
            }
        ) {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .background(MaterialTheme.colorScheme.onErrorContainer)
                    .padding(16.dp),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Row(
                    verticalAlignment = Alignment.CenterVertically,
                    horizontalArrangement = Arrangement.spacedBy(12.dp)
                ) {
                    Text(
                        text = "Êúâ${countForDeadline}È°π‰Ωú‰∏öÂ∑≤ÁªèËø´Âú®ÁúâÁù´ÔºÅ",
                        style = MaterialTheme.typography.bodyLarge.copy(
                            color = MaterialTheme.colorScheme.errorContainer
                        )
                    )
                }
                Icon(
                    imageVector = Icons.AutoMirrored.Filled.KeyboardArrowRight,
                    contentDescription = "View Details",
                    tint = MaterialTheme.colorScheme.errorContainer.copy(alpha = 0.7f),
                )
            }
        }
        if (showDetail) {
            DetailedDialog(
                title = "‰Ωú‰∏öÊà™Ê≠¢ÊèêÈÜí",
                items = DDLList,
                onDismiss = { showDetail = false },
                cardItem = { HomeworkItemCard(it) },
                onClick = { navController.navigate(RouteManager.HomeWork) }
            )
        }
    }
}

@Composable
private fun<T> ChangeCard(
    dataChange: DataChange<T>,
    onClick: () -> Unit
) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .clickable(onClick = onClick),
        shape = RoundedCornerShape(12.dp),
        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)
    ) {
        val (backgroundColor, textColor, icon) = when (dataChange) {
            is DataChange.Added -> Triple(
                MaterialTheme.colorScheme.primaryContainer,
                MaterialTheme.colorScheme.onPrimaryContainer,
                Icons.Default.Add
            )

            is DataChange.Modified -> Triple(
                MaterialTheme.colorScheme.secondaryContainer,
                MaterialTheme.colorScheme.onSecondaryContainer,
                Icons.Default.Edit
            )

            is DataChange.Deleted -> Triple(
                MaterialTheme.colorScheme.errorContainer,
                MaterialTheme.colorScheme.onErrorContainer,
                Icons.Default.Delete
            )
        }

        Row(
            modifier = Modifier
                .fillMaxWidth()
                .background(backgroundColor)
                .padding(16.dp),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.spacedBy(12.dp)
            ) {
                Icon(
                    imageVector = icon,
                    contentDescription = null,
                    tint = textColor
                )
                Text(
                    text = when (dataChange) {
                        is DataChange.Added -> "Êñ∞Â¢û ${dataChange.items.size}È°π"
                        is DataChange.Modified -> "ÂèòÂåñ ${dataChange.items.size}È°π"
                        is DataChange.Deleted -> "Âà†Èô§ ${dataChange.items.size}È°π"
                    },
                    style = MaterialTheme.typography.bodyLarge,
                    color = textColor
                )
            }
            Icon(
                imageVector = Icons.AutoMirrored.Filled.KeyboardArrowRight,
                contentDescription = "View Details",
                tint = textColor.copy(alpha = 0.7f)
            )
        }
    }
}


@Composable
fun DetailedGradeChangeDialog(
    change: DataChange<GradeEntity>,
    onDismiss: () -> Unit,
    navController: NavController
) {
    Dialog(onDismissRequest = onDismiss) {
        Card(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp)
                .verticalScroll(rememberScrollState()),
            shape = MaterialTheme.shapes.large,
            colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.background),
        ) {
            Column(
                modifier = Modifier
                    .padding(16.dp)
                    .fillMaxWidth()
            ) {
                // Dialog Header with count
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Text(
                        text = when (change) {
                            is DataChange.Added -> "Êñ∞Â¢ûËØ¶ÊÉÖ"
                            is DataChange.Modified -> "ÂèòÂä®ËØ¶ÊÉÖ"
                            is DataChange.Deleted -> "Âà†Èô§ËØ¶ÊÉÖ"
                        },
                        style = MaterialTheme.typography.headlineSmall,
                        color = MaterialTheme.colorScheme.primary
                    )
                    Text(
                        text = when (change) {
                            is DataChange.Added -> "${change.items.size}È°π"
                            is DataChange.Modified -> "${change.items.size}È°π"
                            is DataChange.Deleted -> "${change.items.size}È°π"
                        },
                        style = MaterialTheme.typography.titleMedium,
                        color = MaterialTheme.colorScheme.secondary
                    )
                }

                HorizontalDivider(
                    modifier = Modifier.padding(vertical = 16.dp),
                    color = MaterialTheme.colorScheme.outlineVariant
                )

                // Dialog Content
                when (change) {
                    is DataChange.Added -> {
                        change.items.forEachIndexed { index, grade ->
                            if (index > 0) {
                                HorizontalDivider(
                                    modifier = Modifier.padding(vertical = 8.dp),
                                    color = MaterialTheme.colorScheme.outlineVariant.copy(alpha = 0.5f)
                                )
                            }
                            DetailedGradeItem(grade)
                        }
                    }

                    is DataChange.Modified -> {
                        change.items.forEachIndexed { index, (newGrade, oldGrade) ->
                            if (index > 0) {
                                HorizontalDivider(
                                    modifier = Modifier.padding(vertical = 8.dp),
                                    color = MaterialTheme.colorScheme.outlineVariant.copy(alpha = 0.5f)
                                )
                            }
                            ModifiedGradeItem(newGrade, oldGrade)
                        }
                    }

                    is DataChange.Deleted -> {
                        change.items.forEachIndexed { index, grade ->
                            if (index > 0) {
                                HorizontalDivider(
                                    modifier = Modifier.padding(vertical = 8.dp),
                                    color = MaterialTheme.colorScheme.outlineVariant.copy(alpha = 0.5f)
                                )
                            }
                            DetailedGradeItem(grade)
                        }
                    }
                }

                // Dialog Actions
                Row (
                    modifier = Modifier
                        .align(Alignment.End)
                        .padding(top = 16.dp)
                ) {
                    TextButton(
                        onClick = onDismiss,
                    ) {
                        Text("Êí§‰∫Ü", color = MaterialTheme.colorScheme.primary)
                    }

                    Button(
                        onClick = {
                            navController.navigate(RouteManager.Grade)
                        },
                    ) {
                        Text("Êü•ÁúãÊõ¥Â§ö", color = MaterialTheme.colorScheme.onPrimary)
                    }
                }
            }
        }
    }
}

@Composable
fun<T> DetailedChangeDialog(
    change: DataChange<T>,
    onDismiss: () -> Unit,
    cardItem: @Composable (T) -> Unit,
    onClick: () -> Unit = {},
) {
    Dialog(onDismissRequest = onDismiss) {
        Card(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp)
                .verticalScroll(rememberScrollState()),
            shape = MaterialTheme.shapes.large,
            colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.background),
        ) {
            Column(
                modifier = Modifier
                    .padding(16.dp)
                    .fillMaxWidth()
            ) {
                // Dialog Header with count
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Text(
                        text = when (change) {
                            is DataChange.Added -> "Êñ∞Â¢ûËØ¶ÊÉÖ"
                            is DataChange.Modified -> "ÂèòÂä®ËØ¶ÊÉÖ"
                            is DataChange.Deleted -> "Âà†Èô§ËØ¶ÊÉÖ"
                        },
                        style = MaterialTheme.typography.headlineSmall,
                        color = MaterialTheme.colorScheme.primary
                    )
                    Text(
                        text = when (change) {
                            is DataChange.Added -> "${change.items.size}È°π"
                            is DataChange.Modified -> "${change.items.size}È°π"
                            is DataChange.Deleted -> "${change.items.size}È°π"
                        },
                        style = MaterialTheme.typography.titleMedium,
                        color = MaterialTheme.colorScheme.secondary
                    )
                }

                HorizontalDivider(
                    modifier = Modifier.padding(vertical = 16.dp),
                    color = MaterialTheme.colorScheme.outlineVariant
                )

                // Dialog Content
                when (change) {
                    is DataChange.Added -> {
                        change.items.forEachIndexed { index, grade ->
                            if (index > 0) {
                                HorizontalDivider(
                                    modifier = Modifier.padding(vertical = 8.dp),
                                    color = MaterialTheme.colorScheme.outlineVariant.copy(alpha = 0.5f)
                                )
                            }
                            cardItem(grade)
                        }
                    }

                    is DataChange.Modified -> {
                        change.items.forEachIndexed { index, (newGrade, oldGrade) ->
                            if (index > 0) {
                                HorizontalDivider(
                                    modifier = Modifier.padding(vertical = 8.dp),
                                    color = MaterialTheme.colorScheme.outlineVariant.copy(alpha = 0.5f)
                                )
                            }
                            cardItem(newGrade)
                            cardItem(oldGrade)
                        }
                    }

                    is DataChange.Deleted -> {
                        change.items.forEachIndexed { index, grade ->
                            if (index > 0) {
                                HorizontalDivider(
                                    modifier = Modifier.padding(vertical = 8.dp),
                                    color = MaterialTheme.colorScheme.outlineVariant.copy(alpha = 0.5f)
                                )
                            }
                            cardItem(grade)
                        }
                    }
                }

                Row (
                    modifier = Modifier
                        .align(Alignment.End)
                        .padding(top = 16.dp)
                ) {
                    TextButton(
                        onClick = onDismiss,
                    ) {
                        Text("Êí§‰∫Ü", color = MaterialTheme.colorScheme.primary)
                    }

                    Button(
                        onClick = onClick,
                    ) {
                        Text("Êü•ÁúãÊõ¥Â§öüëÄ", color = MaterialTheme.colorScheme.onPrimary)
                    }
                }
            }
        }
    }
}

@Composable
fun<T> DetailedDialog(
    title: String,
    items: List<T>,
    onDismiss: () -> Unit,
    cardItem: @Composable (T) -> Unit,
    onClick: () -> Unit = {},
) {
    Dialog(onDismissRequest = onDismiss) {
        Card(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp)
                .verticalScroll(rememberScrollState()),
            shape = MaterialTheme.shapes.large,
            colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.background),
        ) {
            Column(
                modifier = Modifier
                    .padding(16.dp)
                    .fillMaxWidth()
            ) {
                // Dialog Header with count
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Text(
                        text = title,
                        style = MaterialTheme.typography.headlineSmall,
                        color = MaterialTheme.colorScheme.primary
                    )
                    Text(
                        text = "${items.size}È°π",
                        style = MaterialTheme.typography.titleMedium,
                        color = MaterialTheme.colorScheme.secondary
                    )
                }

                HorizontalDivider(
                    modifier = Modifier.padding(vertical = 16.dp),
                    color = MaterialTheme.colorScheme.outlineVariant
                )

                // Dialog Content
                items.forEachIndexed { index, item ->
                    if (index > 0) {
                        HorizontalDivider(
                            modifier = Modifier.padding(vertical = 8.dp),
                            color = MaterialTheme.colorScheme.outlineVariant.copy(alpha = 0.5f)
                        )
                    }
                    cardItem(item)
                }


                Row (
                    modifier = Modifier
                        .align(Alignment.End)
                        .padding(top = 16.dp)
                ) {
                    TextButton(
                        onClick = onDismiss,
                    ) {
                        Text("Êí§‰∫Ü", color = MaterialTheme.colorScheme.primary)
                    }

                    Button(
                        onClick = onClick,
                    ) {
                        Text("Êü•ÁúãÊõ¥Â§öüëÄ", color = MaterialTheme.colorScheme.onPrimary)
                    }
                }
            }
        }
    }
}

@Composable
private fun DetailedGradeItem(grade: GradeEntity) {
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 8.dp)
            .background(
                MaterialTheme.colorScheme.surface,
                MaterialTheme.shapes.small
            )
            .padding(8.dp)
    ) {
        GradeInfoRow("ËØæÁ®ãÂêçÁß∞", grade.courseName)
        GradeInfoRow("ÊàêÁª©", grade.courseScore)
        GradeInfoRow("Â≠¶ÂàÜ", grade.courseCredits)
    }
}

@Composable
private fun ModifiedGradeItem(newGrade: GradeEntity, oldGrade: GradeEntity) {
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 8.dp)
            .background(MaterialTheme.colorScheme.surface, MaterialTheme.shapes.medium)
            .padding(16.dp)
    ) {
        Text(
            text = "ËØæÁ®ãÔºö${newGrade.courseName}",
            style = MaterialTheme.typography.titleMedium.copy(fontWeight = FontWeight.Bold),
            color = MaterialTheme.colorScheme.primary,
            modifier = Modifier.padding(bottom = 8.dp)
        )

        Card(
            modifier = Modifier.fillMaxWidth(),
            shape = RoundedCornerShape(12.dp),
            colors = CardDefaults.cardColors(
                containerColor = MaterialTheme.colorScheme.surfaceVariant
            ),
            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
        ) {
            Column(modifier = Modifier.padding(16.dp)) {
                KotlinUtils.getDifferentFields(newGrade, oldGrade)
                    .forEach { (field, values) ->
                        GradeChangeRow(field, values.second.toString(), values.first.toString())
                    }
            }
        }
    }
}

@Composable
private fun GradeInfoRow(label: String, value: String) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 4.dp),
        horizontalArrangement = Arrangement.SpaceBetween
    ) {
        Text(
            text = label,
            style = MaterialTheme.typography.bodyMedium,
            color = MaterialTheme.colorScheme.onSurfaceVariant
        )
        Text(
            text = value,
            style = MaterialTheme.typography.bodyMedium,
            color = MaterialTheme.colorScheme.onSurface
        )
    }
}

@Composable
private fun GradeChangeRow(
    fieldName: String,
    oldValue: String,
    newValue: String
) {
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 8.dp)
            .background(MaterialTheme.colorScheme.surfaceContainer, MaterialTheme.shapes.medium)
            .padding(16.dp)
    ) {
        Text(
            text = fieldName,
            style = MaterialTheme.typography.bodyLarge.copy(fontWeight = FontWeight.Bold),
            color = MaterialTheme.colorScheme.onSurface
        )
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(top = 8.dp),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            Text(
                text = oldValue,
                style = MaterialTheme.typography.bodyMedium,
                color = MaterialTheme.colorScheme.error,
                modifier = Modifier.weight(1f)
            )
            Icon(
                imageVector = Icons.Default.ArrowForward,
                contentDescription = "Changed to",
                modifier = Modifier.padding(horizontal = 8.dp),
                tint = MaterialTheme.colorScheme.onSurfaceVariant
            )
            Text(
                text = newValue,
                style = MaterialTheme.typography.bodyMedium,
                color = MaterialTheme.colorScheme.primary,
                modifier = Modifier.weight(1f)
            )
        }
    }
}